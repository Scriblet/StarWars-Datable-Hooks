{"version":3,"sources":["services/API.js","context/StarWarsContext.js","context/Provider.js","components/PlanetsForm.jsx","components/PlanetsTable.jsx","App.js","index.js"],"names":["fetchPlanets","a","fetch","request","json","response","results","StarWarsContext","createContext","GetPlanets","children","useState","setResponse","name","setName","column","setColumn","comparison","setComparison","value","setValue","planetsArray","setPlanets","keysFiltered","setKeysFiltered","filterByName","filterByNumericValues","order","sort","filters","setFilters","useEffect","planets","planetsKeys","Object","keys","filter","element","res","newArray","nome","includes","length","forEach","coluna","comp","valor","planet","parseFloat","ascNumber","b","dscNumber","state","inputFilter","inputName","buttonFilter","newNumericFilter","Provider","PlanetsForm","columnValues","orderColumn","setOrderColumn","orderSort","setOrderSort","useContext","Form","Label","htmlFor","Control","size","type","id","data-testid","onChange","event","target","as","col","some","filterObj","map","columnValue","key","Button","onClick","FormCheck","Check","checked","index","Card","bg","style","width","Header","Body","Text","variant","deletedColumn","PlanetsTable","Table","striped","bordered","hover","responsive","planetsKey","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62258536.chunk.js","sourcesContent":["const fetchPlanets = async () => {\n  const URL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n  const request = await fetch(URL);\n  const response = await request.json();\n  return response.results;\n};\n\nexport default fetchPlanets;\n","import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport fetchPlanets from '../services/API';\nimport StarWarsContext from './StarWarsContext';\n\nfunction GetPlanets({ children }) {\n  const zero = 0;\n\n  const [response, setResponse] = useState([]);\n  const [name, setName] = useState('');\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [value, setValue] = useState(zero);\n  const [planetsArray, setPlanets] = useState([]);\n  const [keysFiltered, setKeysFiltered] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {},\n    filterByNumericValues: [],\n    order: {\n      column: 'name',\n      sort: 'ASC',\n    },\n  });\n\n  useEffect(() => {\n    async function res() {\n      const planets = await fetchPlanets();\n      setResponse([...planets]);\n      setPlanets([...planets]);\n      const planetsKeys = Object.keys(planets[0]);\n      setKeysFiltered(planetsKeys.filter((element) => element !== 'residents'));\n    }\n    res();\n  }, []);\n\n  useEffect(() => {\n    const { filterByName, filterByNumericValues, order } = filters;\n    let newArray = [...response];\n    if (filterByName.name) {\n      const { name: nome } = filterByName;\n      newArray = newArray.filter(({ name: planetName }) => planetName.includes(nome));\n    }\n\n    if (filterByNumericValues.length !== zero) {\n      filterByNumericValues.forEach((element) => {\n        const { column: coluna, comparison: comp, value: valor } = element;\n        if (comp === 'maior que') {\n          newArray = newArray.filter(\n            (planet) => parseFloat(planet[coluna]) > parseFloat(valor),\n          );\n        }\n        if (comp === 'menor que') {\n          newArray = newArray.filter(\n            (planet) => parseFloat(planet[coluna]) < parseFloat(valor),\n          );\n        }\n        if (comp === 'igual a') {\n          newArray = newArray.filter(\n            (planet) => parseFloat(planet[coluna]) === parseFloat(valor),\n          );\n        }\n      });\n    }\n\n    const ascNumber = (a, b) => a[order.column] - b[order.column];\n    const dscNumber = (a, b) => b[order.column] - a[order.column];\n\n    const sortASC = () => {\n      if (\n        order.column === 'orbital_period'\n      || order.column === 'rotation_period'\n      || order.column === 'diameter'\n      || order.column === 'surface_water'\n      || order.column === 'population') {\n        newArray.sort(ascNumber);\n      } else {\n        newArray.sort((a, b) => {\n          const one = 1;\n          const negativeOne = -1;\n          const newZero = 0;\n          if (a[order.column] > b[order.column]) {\n            return one;\n          }\n          if (a[order.column] < b[order.column]) {\n            return negativeOne;\n          }\n          return newZero;\n        });\n      }\n    };\n\n    const sortDESC = () => {\n      if (\n        order.column === 'orbital_period'\n      || order.column === 'rotation_period'\n      || order.column === 'diameter'\n      || order.column === 'surface_water'\n      || order.column === 'population') {\n        newArray.sort(dscNumber);\n      } else {\n        newArray.sort((a, b) => {\n          const one = 1;\n          const negativeOne = -1;\n          const newZero = 0;\n          if (a[order.column] > b[order.column]) {\n            return negativeOne;\n          }\n          if (a[order.column] < b[order.column]) {\n            return one;\n          }\n          return newZero;\n        });\n      }\n    };\n\n    if (order.sort === 'ASC') {\n      sortASC();\n    } else {\n      sortDESC();\n    }\n\n    setPlanets(newArray);\n  }, [filters, response]);\n\n  const inputFilter = (inputName) => {\n    setFilters({\n      ...filters,\n      filterByName: { name: inputName },\n    });\n  };\n\n  const buttonFilter = () => {\n    const newNumericFilter = {\n      column,\n      comparison,\n      value,\n    };\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        ...filters.filterByNumericValues,\n        newNumericFilter,\n      ],\n    });\n  };\n\n  const state = {\n    response,\n    planetsArray,\n    keysFiltered,\n    filters,\n    column,\n    comparison,\n    value,\n    name,\n    setPlanets,\n    setName,\n    setResponse,\n    setColumn,\n    setComparison,\n    setFilters,\n    setValue,\n    inputFilter,\n    buttonFilter,\n    setKeysFiltered,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ state }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n}\n\nGetPlanets.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default GetPlanets;\n","import React, { useContext, useState } from 'react';\nimport { Form, FormCheck, Card, Button } from 'react-bootstrap';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction PlanetsForm() {\n  const [columnValues] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ]);\n  const [orderColumn, setOrderColumn] = useState('name');\n  const [orderSort, setOrderSort] = useState('ASC');\n  const {\n    inputFilter,\n    setColumn,\n    setComparison,\n    setValue,\n    buttonFilter,\n    filters,\n    setFilters,\n    keysFiltered,\n  } = useContext(StarWarsContext);\n  const { filterByNumericValues } = filters;\n\n  const filterColumn = () => {\n    buttonFilter();\n  };\n\n  const deleteFilter = (deletedColumn) => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: filters.filterByNumericValues.filter(\n        ({ column }) => column !== deletedColumn,\n      ),\n    });\n  };\n\n  const orderFilter = () => {\n    setFilters({\n      ...filters,\n      order: { column: orderColumn, sort: orderSort },\n    });\n  };\n\n  const zero = 0;\n  return (\n    <div>\n      <Form>\n        <Form.Label htmlFor=\"name-filter\">\n          Filtrar por nome\n          <Form.Control\n            size=\"sm\"\n            type=\"text\"\n            id=\"name-filter\"\n            data-testid=\"name-filter\"\n            onChange={ (event) => inputFilter(event.target.value) }\n          />\n        </Form.Label>\n        <br />\n        <Form.Label htmlFor=\"column-filter\">\n          Selecione sua coluna\n          <Form.Control\n            as=\"select\"\n            size=\"sm\"\n            name=\"column-filter\"\n            id=\"column-filter\"\n            data-testid=\"column-filter\"\n            onChange={ (event) => setColumn(event.target.value) }\n          >\n            {columnValues\n              .filter(\n                (col) => !filterByNumericValues.some(\n                  (filterObj) => col === filterObj.column,\n                ),\n              )\n              .map((columnValue) => (\n                <option key={ columnValue } value={ columnValue }>\n                  {columnValue}\n                </option>\n              ))}\n          </Form.Control>\n        </Form.Label>\n        <Form.Label htmlFor=\"value-range\">\n          Faixa de Valor\n          <Form.Control\n            as=\"select\"\n            size=\"sm\"\n            name=\"value-range\"\n            id=\"value-range\"\n            data-testid=\"comparison-filter\"\n            onChange={ (event) => setComparison(event.target.value) }\n          >\n            <option value=\"maior que\">maior que</option>\n            <option value=\"menor que\">menor que</option>\n            <option value=\"igual a\">igual a</option>\n          </Form.Control>\n        </Form.Label>\n        <Form.Label htmlFor=\"value-filter\">\n          Valor\n          <Form.Control\n            size=\"sm\"\n            id=\"value-filter\"\n            data-testid=\"value-filter\"\n            type=\"number\"\n            onChange={ (event) => setValue(event.target.value) }\n          />\n        </Form.Label>\n        <Button\n          type=\"button\"\n          data-testid=\"button-filter\"\n          onClick={ () => filterColumn() }\n        >\n          Filtrar\n        </Button>\n        <br />\n        <Form.Label htmlFor=\"collumn\">\n          Ordernar por coluna\n          <Form.Control\n            as=\"select\"\n            size=\"sm\"\n            name=\"column-sort\"\n            id=\"column-sort\"\n            data-testid=\"column-sort\"\n            onChange={ (event) => setOrderColumn(event.target.value) }\n          >\n            {keysFiltered.map((columnValue) => (\n              <option key={ columnValue } value={ columnValue }>\n                {columnValue}\n              </option>\n            ))}\n          </Form.Control>\n        </Form.Label>\n        <FormCheck.Label htmlFor=\"radio-asc\">\n          Ascendente\n          <Form.Check\n            name=\"order\"\n            type=\"radio\"\n            id=\"radio-asc\"\n            checked={ orderSort === 'ASC' }\n            value=\"ASC\"\n            data-testid=\"column-sort-input-asc\"\n            onChange={ (event) => setOrderSort(event.target.value) }\n          />\n        </FormCheck.Label>\n        <FormCheck.Label htmlFor=\"radio-dsc\">\n          Descendente\n          <Form.Check\n            name=\"order\"\n            type=\"radio\"\n            id=\"radio-dsc\"\n            checked={ orderSort === 'DESC' }\n            value=\"DESC\"\n            data-testid=\"column-sort-input-desc\"\n            onChange={ (event) => setOrderSort(event.target.value) }\n          />\n        </FormCheck.Label>\n        <Button\n          type=\"button\"\n          data-testid=\"column-sort-button\"\n          onClick={ () => orderFilter() }\n        >\n          Ordernar\n        </Button>\n      </Form>\n      {filterByNumericValues.length > zero\n        && filterByNumericValues.map((element, index) => (\n          <Card\n            bg=\"light\"\n            key={ element }\n            data-testid=\"filter\"\n            style={ { width: '10rem' } }\n          >\n            <Card.Header>{`Filtro ${index + 1}`}</Card.Header>\n            <Card.Body>\n              <Card.Text>{element.column}</Card.Text>\n              <Card.Text>{element.comparison}</Card.Text>\n              <Card.Text>{element.value}</Card.Text>\n            </Card.Body>\n            <Button\n              variant=\"danger\"\n              type=\"button\"\n              onClick={ () => deleteFilter(element.column) }\n            >\n              X\n            </Button>\n          </Card>\n        ))}\n    </div>\n  );\n}\n\nexport default PlanetsForm;\n","import React, { useContext } from 'react';\nimport { Table } from 'react-bootstrap';\nimport StarWarsContext from '../context/StarWarsContext';\nimport PlanetsForm from './PlanetsForm';\n\nfunction PlanetsTable() {\n  const { planetsArray, keysFiltered } = useContext(StarWarsContext);\n  const zero = 0;\n  if (planetsArray.length > zero) {\n    return (\n      <div>\n        <PlanetsForm />\n        <Table striped bordered hover responsive>\n          <thead>\n            <tr>\n              {keysFiltered.map((planetsKey) => (\n                <th\n                  key={ planetsKey.name }\n                >\n                  {planetsKey}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {planetsArray.map((planet) => (\n              <tr key={ planet }>\n                <td data-testid=\"planet-name\">{planet.name}</td>\n                <td>{planet.rotation_period}</td>\n                <td>{planet.orbital_period}</td>\n                <td>{planet.diameter}</td>\n                <td>{planet.climate}</td>\n                <td>{planet.gravity}</td>\n                <td>{planet.terrain}</td>\n                <td>{planet.surface_water}</td>\n                <td>{planet.population}</td>\n                <td>{planet.films}</td>\n                <td>{planet.created}</td>\n                <td>{planet.edited}</td>\n                <td>{planet.url}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <PlanetsForm />\n    </div>\n  );\n}\n\nexport default PlanetsTable;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Provider from './context/Provider';\nimport './App.css';\nimport PlanetsTable from './components/PlanetsTable';\n\nfunction App() {\n  return (\n    <Provider>\n      <PlanetsTable />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}